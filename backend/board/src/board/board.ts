// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: src/board/board.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./protobuf/timestamp";

export const protobufPackage = "board";

export interface Board {
  id: string;
  name: string;
  projectId: string;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface BoardListRequest {
  boards: Board[];
}

export interface BoardCreateRequest {
  name: string;
  projectId: string;
}

export interface BoardUpdateRequest {
  id: string;
  name: string;
}

export interface BoardDeleteRequest {
  id: string;
}

export interface BoardGetRequest {
  id: string;
}

export interface BoardListResponse {
  boards: Board[];
}

export interface BoardCreateResponse {
  board: Board | undefined;
}

export interface BoardUpdateResponse {
  board: Board | undefined;
}

export interface BoardDeleteResponse {
  id: string;
}

export interface BoardGetResponse {
  board: Board | undefined;
}

export const BOARD_PACKAGE_NAME = "board";

export interface BoardServiceClient {
  createBoard(request: BoardCreateRequest): Observable<BoardCreateResponse>;

  updateBoard(request: BoardUpdateRequest): Observable<BoardUpdateResponse>;

  deleteBoard(request: BoardDeleteRequest): Observable<BoardDeleteResponse>;

  listBoards(request: BoardListRequest): Observable<BoardListResponse>;

  getBoard(request: BoardGetRequest): Observable<BoardGetResponse>;
}

export interface BoardServiceController {
  createBoard(
    request: BoardCreateRequest,
  ): Promise<BoardCreateResponse> | Observable<BoardCreateResponse> | BoardCreateResponse;

  updateBoard(
    request: BoardUpdateRequest,
  ): Promise<BoardUpdateResponse> | Observable<BoardUpdateResponse> | BoardUpdateResponse;

  deleteBoard(
    request: BoardDeleteRequest,
  ): Promise<BoardDeleteResponse> | Observable<BoardDeleteResponse> | BoardDeleteResponse;

  listBoards(request: BoardListRequest): Promise<BoardListResponse> | Observable<BoardListResponse> | BoardListResponse;

  getBoard(request: BoardGetRequest): Promise<BoardGetResponse> | Observable<BoardGetResponse> | BoardGetResponse;
}

export function BoardServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createBoard", "updateBoard", "deleteBoard", "listBoards", "getBoard"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BoardService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BoardService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOARD_SERVICE_NAME = "BoardService";
