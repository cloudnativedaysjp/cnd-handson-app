// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: src/proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "user";

/** --- CreateUser --- */
export interface CreateUserRequest {
  name: string;
  email: string;
  password: string;
  roleId: string;
}

/** --- UpdateUser --- */
export interface UpdateUserRequest {
  id: string;
  name: string;
  email: string;
  password: string;
  roleId: string;
}

/** --- GetUser --- */
export interface GetUserRequest {
  id: string;
}

/** --- ListUsers --- */
export interface ListUsersRequest {
}

export interface ListUsersResponse {
  users: User[];
}

/** --- VerifyPassword --- */
export interface VerifyPasswordRequest {
  email: string;
  password: string;
}

/** --- User --- */
export interface User {
  id: string;
  name: string;
  email: string;
  roleId: string;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

/** --- UserResponse --- */
export interface UserResponse {
  user: User | undefined;
}

/** --- DeleteUser --- */
export interface DeleteUserRequest {
  id: string;
}

export interface DeleteUserResponse {
  success: boolean;
}

export const USER_PACKAGE_NAME = "user";

/**
 * ================================
 * サービス定義
 * ================================
 */

export interface UserServiceClient {
  /** ユーザーの作成 */

  createUser(request: CreateUserRequest): Observable<UserResponse>;

  /** ユーザーの更新 */

  updateUser(request: UpdateUserRequest): Observable<UserResponse>;

  /** ユーザーの取得 */

  getUser(request: GetUserRequest): Observable<UserResponse>;

  /** パスワードの検証 */

  verifyPassword(request: VerifyPasswordRequest): Observable<UserResponse>;

  /** ユーザー一覧の取得 */

  listUsers(request: ListUsersRequest): Observable<ListUsersResponse>;

  /** ユーザーの削除 */

  deleteUser(request: DeleteUserRequest): Observable<DeleteUserResponse>;
}

/**
 * ================================
 * サービス定義
 * ================================
 */

export interface UserServiceController {
  /** ユーザーの作成 */

  createUser(request: CreateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** ユーザーの更新 */

  updateUser(request: UpdateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** ユーザーの取得 */

  getUser(request: GetUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** パスワードの検証 */

  verifyPassword(request: VerifyPasswordRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** ユーザー一覧の取得 */

  listUsers(request: ListUsersRequest): Promise<ListUsersResponse> | Observable<ListUsersResponse> | ListUsersResponse;

  /** ユーザーの削除 */

  deleteUser(
    request: DeleteUserRequest,
  ): Promise<DeleteUserResponse> | Observable<DeleteUserResponse> | DeleteUserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "updateUser", "getUser", "verifyPassword", "listUsers", "deleteUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
