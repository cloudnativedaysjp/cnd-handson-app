// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: src/proto/session.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "session";

/** --- GenerateAccessToken --- */
export interface GenerateAccessTokenRequest {
  userId: string;
}

export interface AccessTokenResponse {
  accessToken: string;
  expiresAt: number;
}

/** --- ValidateAccessToken --- */
export interface ValidateAccessTokenRequest {
  accessToken: string;
}

export interface ValidateAccessTokenResponse {
  valid: boolean;
  userId: string;
  error: string;
}

/** --- GenerateRefreshToken --- */
export interface GenerateRefreshTokenRequest {
  userId: string;
}

export interface RefreshTokenResponse {
  refreshToken: string;
  expiresAt: number;
  userId: string;
}

/** --- RevokeRefreshToken --- */
export interface RevokeRefreshTokenRequest {
  refreshToken: string;
  userId: string;
}

export interface RevokeRefreshTokenResponse {
  success: boolean;
}

/** --- ValidateRefreshToken --- */
export interface ValidateRefreshTokenRequest {
  refreshToken: string;
  userId: string;
}

export interface ValidateRefreshTokenResponse {
  valid: boolean;
}

export const SESSION_PACKAGE_NAME = "session";

export interface AccessTokenServiceClient {
  /** アクセストークンの生成（ログイン後・リフレッシュ時） */

  generateAccessToken(request: GenerateAccessTokenRequest): Observable<AccessTokenResponse>;

  /** アクセストークンの検証 */

  validateAccessToken(request: ValidateAccessTokenRequest): Observable<ValidateAccessTokenResponse>;
}

export interface AccessTokenServiceController {
  /** アクセストークンの生成（ログイン後・リフレッシュ時） */

  generateAccessToken(
    request: GenerateAccessTokenRequest,
  ): Promise<AccessTokenResponse> | Observable<AccessTokenResponse> | AccessTokenResponse;

  /** アクセストークンの検証 */

  validateAccessToken(
    request: ValidateAccessTokenRequest,
  ): Promise<ValidateAccessTokenResponse> | Observable<ValidateAccessTokenResponse> | ValidateAccessTokenResponse;
}

export function AccessTokenServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["generateAccessToken", "validateAccessToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AccessTokenService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AccessTokenService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ACCESS_TOKEN_SERVICE_NAME = "AccessTokenService";

export interface RefreshTokenServiceClient {
  /** リフレッシュトークンの生成（ログイン時） */

  generateRefreshToken(request: GenerateRefreshTokenRequest): Observable<RefreshTokenResponse>;

  /** リフレッシュトークンの無効化（ログアウト時など） */

  revokeRefreshToken(request: RevokeRefreshTokenRequest): Observable<RevokeRefreshTokenResponse>;

  /** リフレッシュトークンの検証 */

  validateRefreshToken(request: ValidateRefreshTokenRequest): Observable<ValidateRefreshTokenResponse>;
}

export interface RefreshTokenServiceController {
  /** リフレッシュトークンの生成（ログイン時） */

  generateRefreshToken(
    request: GenerateRefreshTokenRequest,
  ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;

  /** リフレッシュトークンの無効化（ログアウト時など） */

  revokeRefreshToken(
    request: RevokeRefreshTokenRequest,
  ): Promise<RevokeRefreshTokenResponse> | Observable<RevokeRefreshTokenResponse> | RevokeRefreshTokenResponse;

  /** リフレッシュトークンの検証 */

  validateRefreshToken(
    request: ValidateRefreshTokenRequest,
  ): Promise<ValidateRefreshTokenResponse> | Observable<ValidateRefreshTokenResponse> | ValidateRefreshTokenResponse;
}

export function RefreshTokenServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["generateRefreshToken", "revokeRefreshToken", "validateRefreshToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RefreshTokenService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RefreshTokenService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const REFRESH_TOKEN_SERVICE_NAME = "RefreshTokenService";
